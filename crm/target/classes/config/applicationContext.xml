<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:property-placeholder location="classpath:config/jdbc.properties"/>

    <!--Spring配置文件：用来声明service,dao,工具类等对象-->

    <!--声明数据源，连接数据库-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--SqlSessionFactoryBean创建SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:config/mybatis.xml"/>
    </bean>

    <!--声明mybatis的扫描器，扫描dao对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="SqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.bjpowernode.crm.settings.dao,com.bjpowernode.crm.workbench.dao"/>
    </bean>

    <!--声明service的注解@Service所在的包名位置-->
    <context:component-scan base-package="com.bjpowernode.crm.settings.service.impl"/>
    <context:component-scan base-package="com.bjpowernode.crm.workbench.service.impl"/>

    <!--事务配置：注解的配置，aspectj的配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--连接的数据库，指定数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--2.开启事务注解驱动，告诉spring使用注解管理事务，创建代理对象
    transaction-manager：事务管理器对象的id
    -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--
     &lt;!&ndash;2.声明业务方法的事务属性（隔离级别，传播行为，超时时间）
             id:自定义名称，表示<tx:advice>和</tx:advice>之间的配置内容
             transaction-Manager事务管理器对象的id&ndash;&gt;
     <tx:advice id="myAdvice" transaction-manager="transactionManager">
         &lt;!&ndash;<tx:attributes>:配置事务属性&ndash;&gt;
         <tx:attributes>
             &lt;!&ndash;tx:method:给具体的方法配置事务属性，method可以有多个，分别给不同的方法设置事务属性
                 name:方法名称，1）完整的方法名称，不带有包和类。
                               2）方法可以使用通配符*表示任意字符
                 propagation:传播行为，枚举值
                 isolation：隔离级别
                 rollback-for：你指定的异常类名，全限定类名。发生异常一定回滚
             &ndash;&gt;
             <tx:method name="*" propagation="REQUIRED"/>
         </tx:attributes>
     </tx:advice>

     <aop:config>
         &lt;!&ndash;配置切入点表达式：指定哪些包中类，要使用事务
             id：切入式表达式的名称，唯一值
             expression：切入点表达式，指定哪些类要使用事务，aspectj会创建代理对象
         &ndash;&gt;
         <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>

         &lt;!&ndash;配置增强器：关联advice和pointcut
             advice-ref:通知，上面tx:advice那里的设置
             pointcut-ref:切入点表达式的id
         &ndash;&gt;
         <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>
     </aop:config>
     -->
</beans>